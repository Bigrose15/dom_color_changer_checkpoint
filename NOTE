// Let's break down this code:

// Function Declaration

// function generateRandomColor() {
//   ...
// }

// Declares a function named generateRandomColor that takes no arguments.

// Generating Random RGB Values

// const r = Math.floor(Math.random() * 256);
// const g = Math.floor(Math.random() * 256);
// const b = Math.floor(Math.random() * 256);

// Generates three random numbers between 0 and 255 (inclusive) for:

// - Red (R)
// - Green (G)
// - Blue (B)

// Here's how it works:

// 1. Math.random() generates a random decimal number between 0 (inclusive) and 1 (exclusive).
// 2. Multiplying by 256 scales the range to 0-255.
// 3. Math.floor() rounds down to the nearest integer.

// Returning RGB Color String

// return `rgb(${r}, ${g}, ${b})`;

// Returns a string representing the random RGB color in the format rgb(r, g, b).

// Template Literals

// `rgb(${r}, ${g}, ${b})`

// Uses template literals (backticks `) to create a string with embedded expressions. The expressions (${r}`, ${g}, ${b}) are replaced with the actual values.

// Example Output

// rgb(123, 456, 789)

// A random RGB color string.

// Why 256?
// 256 is the maximum value for each RGB component (Red, Green, Blue). This range allows for approximately 16.7 million possible colors.

// Alternative: HSL Colors

// function generateRandomColor() {
//   const h = Math.random() * 360;
//   const s = Math.random() * 100 + '%';
//   const l = Math.random() * 100 + '%';
//   return `hsl(${h}, ${s}, ${l})`;
// }

// Generates a random HSL (Hue, Saturation, Lightness) color. This produces more vibrant and evenly distributed colors.

// // Let's dive deeper into Math.random():

// // *What is Math.random()?*

// // Math.random() is a JavaScript function that generates a random number.

// // *Range of Math.random()*

// // Math.random() generates a random decimal number between:

// // - 0 (inclusive): The minimum value is 0.
// // - 1 (exclusive): The maximum value is less than 1, but can be very close to 1.

// // In other words, Math.random() produces a random number in the range [0, 1), where:

// // - [0 means "greater than or equal to 0"
// // -     1. means "less than 1"

// // *Examples of Math.random() outputs*

// // - 0.542811234
// // - 0.819234567
// // - 0.035712345
// // - 0.999999999 (very close to 1, but not exactly)

// // Important notes

// // - Math.random() never returns exactly 1.
// // - Math.random() can return 0.
// // - The generated numbers are pseudo-random, meaning they're algorithmically generated and not truly random.

// // *How to use Math.random() for integer ranges*

// // To generate random integers within a specific range, you can use the following formulas:

// // - For a range [min, max): Math.floor(Math.random() * (max - min)) + min
// // - For a range [min, max]: Math.floor(Math.random() * (max - min + 1)) + min

// // Example: Generate a random integer between 1 and 10:

// // Math.floor(Math.random() * 10) + 1

// // Visual representation

// // Imagine a line segment from 0 to 1, where Math.random() picks a random point on that line. The point can be anywhere between 0 and 1, but never exactly at 1.

// // 0 ---------------------------------------- 1
// // |                                         |
// // |  Random point picked by Math.random()  |
// // |                                         |

// // Keep in mind that Math.random() is a pseudo-random number generator, meaning it uses an algorithm to generate numbers that appear random. While it's suitable for most purposes, it's not suitable for cryptographic or high-stakes random number generation.
